#!/usr/bin/env python

import signal
import multiprocessing
import os
import subprocess
import socket
import json
import time, datetime
import re
import StringIO
import getopt, sys
import fcntl, struct

class Tc():
	def __init__(self):
		sock = socket.socket(socket.AF_NETLINK, socket.SOCK_DGRAM, socket.NETLINK_ROUTE);
		sock.bind((0, 0));
	#end def __init__

class TcCmd():
	def __init__(self, dev):
		self.dev = dev;
		SIOCGIFADDR = 0x8915;
		SIOCGIFFLAGS = 0x8913;

		try:
			sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM);
			ifr = self.dev + '\0' * 256;
			ret = fcntl.ioctl(sock.fileno(), SIOCGIFFLAGS, ifr);
			flags, = struct.unpack('H', ret[16:18]);
			state = flags & 1;
			if state == 0:
				print self.dev, "is down.";
				sys.exit(4);
		except Exception as e:
			print self.dev, ":", str(e)
			sys.exit(4);
		#end try
	#end def __init__

	def GetQdiscStats(self):
		try:
			self.tc_qdisc  = subprocess.Popen(["tc", "-s", "qdisc", "show", "dev", self.dev], stdout=subprocess.PIPE);
		except Exception as e:
			print "Error:" + str(type(e)) + e.message;
		#end try

		qdisc_dict = {}

		while 1:
			line = self.tc_qdisc.stdout.readline();
			#qdisc netem d1: parent 1:d1 limit 14880000 delay 8.1ms
			if not line:
				break
			#end if
	
			val = line.split();
			list_cnt = len(val);
	
			if val[0] == "qdisc":
				if val[1] == "netem":
					handle_str = {"handle" : val[2]};
					handle = val[2].split(':');
					if handle[0] == '':
						handle[0] = "0";
					#end if
					if handle[1] == '':
						handle[1] = "0";
					#end if
					handle_int = {"handle_int" : (int(handle[0], 16) << 16) ^ int(handle[1], 16)};

					key = val[4];
					parent_str = {"parent" : val[4]};
					parent = val[4].split(':');
					if parent[0] == '':
						parent[0] = "0";
					#end if
					if parent[1] == '':
						parent[1] = "0";
					#end if
					parent_int = {"parent_int" : (int(parent[0], 16) << 16) ^ int(parent[1], 16)};

					qdisc_dict[key] = {};
					qdisc_dict[key].update(handle_str);
					qdisc_dict[key].update(handle_int);
					qdisc_dict[key].update(parent_int);

					delay = {"delay" : 0};
					limit = {"limit" : 0};
					loss  = {"loss" : 0};
					i = 5;
					while True:
						if list_cnt <= i:
							break;
						#end if
						if val[i] == "limit":
							limit = {"limit" : val[i + 1]};
							i = i + 2;
						elif val[i] == "delay":
							delay = {"delay" : self.GetDelay(val[i + 1])};
							i = i + 2;
						elif val[i] == "loss":
							loss = {"loss" : re.sub("%", "", val[i + 1])};
							i = i + 2;
						else:
							i = i + 1;
						#end if
					#end while
	
					qdisc_dict[key].update(limit);
					qdisc_dict[key].update(delay);
					qdisc_dict[key].update(loss);

					line = self.tc_qdisc.stdout.readline();
					#Sent 1079316974 bytes 712891 pkt (dropped 0, overlimits 0 requeues 0) 
					val = line.split();
					sent = {"sent" : val[1]};
					pkts = {"pkts" : val[3]};
					drop = {"drop" : val[6].rstrip(",")};
					over = {"overlimits" : val[8]};
					qdisc_dict[key].update(sent);
					qdisc_dict[key].update(pkts);
					qdisc_dict[key].update(drop);
					qdisc_dict[key].update(over);
			
					#backlog 0b 0p requeues 0
					line = self.tc_qdisc.stdout.readline();
					val = line.split();

					backlog_pkts = {"backlog_pkts" : val[2].rstrip("p")};
					requeue      = {"requeue" : val[4]};
					qdisc_dict[key].update(backlog_pkts);
					qdisc_dict[key].update(requeue);
				#end if
			#end if
		#end while

		return qdisc_dict;
	#end def GetQdiscStats
	
	def GetDelay(self, delay):
		if delay.find("%") != -1:
			return 0;
	
		if delay.find("us") != -1:
			delay = float(delay.rstrip("us"));
		elif delay.find("ms") != -1:
			delay = float(delay.rstrip("ms")) * 1000;
		elif delay.find("s") != -1:
			delay = float(delay.rstrip("s")) * 1000 * 1000;
	
		return delay;
	
	def GetClassStats(self):
		try:
			self.tc_class  = subprocess.Popen(["tc", "-s", "class", "show", "dev", self.dev], stdout=subprocess.PIPE);
		except Exception as e:
			print "Error:" + str(type(e)) + e.message;
		#end try

		class_dict = {};
		while 1:
			line = self.tc_class.stdout.readline();
			#qdisc netem d1: parent 1:d1 limit 14880000 delay 8.1ms
			if not line:
				break
			#end while
	
			val = line.split();
				
			if val[1] == "netem":
				break;
			#end if
	
			#class htb 1:15 root leaf 15: prio 0 rate 8389Mbit ceil 8389Mbit burst 0b cburst 0b 
			if val[0] == "class":
				if val[1] == "htb":
					key = val[2];
					classid_str = {"classid" : val[2]};
					classid = val[2].split(':');
					if classid[0] == '':
						classid[0] = 0;
					#end if
					if classid[1] == '':
						classid[1] = 0
					#end if
					classid_int = {"classid_int" : (int(classid[0], 16) << 16) ^ int(classid[1], 16)};

					class_dict[key] = {};
					class_dict[key].update(classid_str);
					class_dict[key].update(classid_int);

					if val[5] == "root":
						parent_int = 0;
						parent_str = {"parent" : val[5]};
					else:
						parent = val[5].split(':');
						if parent[0] == '':
							parent[0] = "0";
						#end if
						if parent[1] == '':
							parent[1] = "0";
						#end if
						parent_int = {"parent_int" : (int(parent[0], 16) << 16) ^ int(parent[1], 16)};
						parent_str = {"parent" : val[5]};
					#end if

					class_dict[key].update(parent_str);
					class_dict[key].update(parent_int);

					confrate = self.GetSpeed(val[9]);

					#Sent 1640481074 bytes 1083541 pkt (dropped 0, overlimits 0 requeues 0) 
					line = self.tc_class.stdout.readline();
					val = line.split();

					sent = {"sent" : val[1]};
					pkts = {"pkts" : val[3]};
					drop = {"drop" : val[6].rstrip(",")};
					over = {"overlimits" : val[8]};
					class_dict[key].update(sent);
					class_dict[key].update(pkts);
					class_dict[key].update(drop);
					class_dict[key].update(over);
			
					#rate 3719Kbit 307pps backlog 0b 562p requeues 0 
					line = self.tc_class.stdout.readline();
					val = line.split();

					rate         = {"rate" : val[1]};
					rate_pkts    = {"rate_pkts" : val[2]};
					backlog_pkts = {"backlog_pkts" : val[5].rstrip("p")};
					requeue = {"requeue" : val[7]};
					class_dict[key].update(rate);
					class_dict[key].update(rate_pkts);
					class_dict[key].update(backlog_pkts);
					class_dict[key].update(requeue);
			
					#lended :  1082979 borrowed :  0 giants :  0
					line = self.tc_class.stdout.readline();
					val = line.split();

					lended   = {"lended" : val[1]};
					borrowed = {"borrowed" : val[3]};
					giants   = {"giants" : val[5]};
					class_dict[key].update(lended);
					class_dict[key].update(borrowed);
					class_dict[key].update(giants);

					#tokens :  0 ctokens :  0
					line = self.tc_class.stdout.readline();
					val = line.split();

					tokens  = {"tokens" : val[1]};
					ctokens = {"ctokens" : val[3]};
					class_dict[key].update(tokens);
					class_dict[key].update(ctokens);

					line = self.tc_class.stdout.readline();
				#end if
			#end if
		#end while

		return class_dict;
	
	def GetSpeed(self, rate):
		if rate.find("Mbit") != -1:
			rate = int(rate.rstrip("Mbit"));
			rate = rate * 1024 * 1024;
		elif rate.find("Kbit") != -1:
			rate = int(rate.rstrip("Kbit"));
			rate = rate * 1024;
		elif rate.find("bit") != -1:
			rate = int(rate);
		#end if
	
		return rate;
	#end GetSpeed

	def marge_cls_q(self, qdisc_dict, class_dict):
		stat_dict = {};
		for key in class_dict.iterkeys():
			stat_dict[key] = {"qdisc" : qdisc_dict[key]};
			stat_dict[key].update({"class" : class_dict[key]});
		#end for

		return stat_dict;
	#end def marge_cls_q

	def diff_stat(self, stat, priv_stat, ofile):
		#stat[key]["qdisc"]["backlog_pkts"];
		time_unix_now = int(time.time());
		time_datetime_now = datetime.datetime.fromtimestamp(time_unix_now);
		for key in priv_stat.iterkeys():
			if key == "1:ffff":
				continue;
			#end if

			try:
				flowid = stat[key]["class"]["classid"];
				send = int(stat[key]["qdisc"]["sent"]) - int(priv_stat[key]["qdisc"]["sent"]);
				pkts = int(stat[key]["qdisc"]["pkts"]) - int(priv_stat[key]["qdisc"]["pkts"]);
				delay = stat[key]["qdisc"]["delay"];
				loss = stat[key]["qdisc"]["loss"];
				backlog = stat[key]["qdisc"]["backlog_pkts"];
				limit = stat[key]["qdisc"]["limit"];
				drop = int(stat[key]["qdisc"]["drop"]) - int(priv_stat[key]["qdisc"]["drop"]);
				over = int(stat[key]["qdisc"]["overlimits"]) - int(priv_stat[key]["qdisc"]["overlimits"]);

				rets = time_unix_now, "key:", flowid, "send:", send, "send_packets:", pkts, "backlog:", backlog + "/" + limit, "delay:", delay, "loss:",  loss, "drop:", drop, "overlimits:", over;

				for ret in rets:
					if quiet == False:
						print ret,;
					#end if
					if ofile != None:
						ofile.write(str(ret) + " ");
						ofile.flush();
					#end if
				#end for
				
				if quiet == False:
					print "";
				#end if

				if ofile != None:
					ofile.write("\n");
					ofile.flush();
				#end if

			except KeyError as e:
				print "KeyError: " + str(e.message);
				pass
			except TypeError as e:
				print "TypeError:" + e.message;
			#end try
		#end for
	#def diff_stat

	def GetFilterStat(self):
		try:
			self.tc_filter = subprocess.Popen(["tc", "-s", "filter", "show", "dev", self.dev], stdout=subprocess.PIPE);
		except Exception as e:
			print "Error:" + str(type(e)) + e.message;
		#end try
	#end def GetFilterStat


def usage():
	print "Usage: monitor_tc [-dhq] -i INTERFACE_NAME [-s FLOAT] [-o FILENAME]";
	print "  -o : output filename = FILENAME_INTERFACE_NAME.log"
#end def usage

def PrintTcStat(lock, ifname, ofilename):
	try:
		if ofilename != None:
			try:
				filename = ofilename + "_" + ifname + ".log";
				ofile = open(filename, 'a');
			except Exception as e:
				sys.exit(3);
			#end try
		else:
			ofile = None;
		#end if	
	
		tc = TcCmd(ifname);
		qdisc_dict = tc.GetQdiscStats();
		class_dict = tc.GetClassStats();
	
		priv_stat = tc.marge_cls_q(qdisc_dict, class_dict);
	
		while True:
			qdisc_dict = tc.GetQdiscStats();
			class_dict = tc.GetClassStats();
		
			stat_dict = tc.marge_cls_q(qdisc_dict, class_dict);
			tc.diff_stat(stat_dict, priv_stat, ofile);
	
			if debug == True:
				io = StringIO.StringIO();
				json.dump(stat_dict, io, sort_keys = False, indent = 4);
				lock.acquire();
				print io.getvalue()
				lock.release();
			#end if
	
			priv_stat = stat_dict.copy();
			time.sleep(step);
		#end while

	except KeyboardInterrupt:
		pass
	#end try
#end PrintTcStat

def sigterm_handler(signum, frame):
	for j in jobs:
		j.join();

def main():
	sopt = "dhi:o:qs:";
	lopt = [
		"dump-json",
		"help",
		"interface=", 
		"outfile=",
		"quiet",
		"step="
	]

	try:
		opts, args = getopt.getopt(sys.argv[1:], sopt, lopt);
	except getopt.GetoptError:
		sys.exit(2);

	global jobs;
	global step;
	global debug;
	global quiet;
	ifnames = [];
	jobs = [];
	step = 1;
	debug = False;
	ofilename = None;
	quiet = False;

	for opt, arg in opts:
		if opt in ("-d", "--dump-json"):
			debug = True;
		#end if
		if opt in ("-h", "--help"):
			usage();
			sys.exit(0);
		#end if
		if opt in ("-i", "--interface"):
			ifnames.append(arg);
		#end if
		if opt in ("-o", "--outfile"):
			ofilename = arg;
		#end if
		if opt in ("-q", "--quiet"):
			quiet = True;
		#end if
		if opt in ("-s", "--step"):
			step = float(arg);
		#end if
	#end for

	if ifnames == []:
		usage();
		sys.exit(1);
	#end if

	lock = multiprocessing.Lock();
	signal.signal(signal.SIGTERM, sigterm_handler);

	for ifname in ifnames:
		jobs.append(multiprocessing.Process(target=PrintTcStat, args=(lock, ifname, ofilename)));
	#end for

	for j in jobs:
		j.start();
	#end for

	for j in jobs:
		j.join();
	#end for

try:
	if __name__ == '__main__':
		sys.exit(main())
except KeyboardInterrupt:
	pass
#end try
